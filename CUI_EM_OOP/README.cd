# オブジェクト指向総合演習

## **各種説明**

### **演習目的**

オブジェクト指向の概念や機能を組み合わせた、オブジェクト指向総合演習課題です  
学習した知識のアウトプット、オブジェクト指向の活用法の学習として実施していただきます。  
また、課題をとおして以下のようなビジネススキルも合わせて学習していただきます。  

* 納期の重要さ
* 開発の進め方
* 調査力
* 質問力

### **システム名**

社員メンテナンス（ファイルシステム版）  

### **システム説明**

社員情報(CSVファイル)のCRUDシステム  

* ※CRUDとは  
  Create（生成）、Read（読み取り）、Update（更新）、Delete（削除）の機能を有したシステムのこと。

### **配布物**

* docフォルダ  
    * API仕様書(JavaDoc)  
      今回作っていただくMain.javaとEmployeeに関しては、回答例のメソッド構成が載っています。  
      参考にしていただいても構いませんし、独自の作り方をしていただいても構いません。  
* fileフォルダ  
    * EmployeeData.csv  
      従業員データ一覧のCSVファイル
    * DepartmentData.csv
      部署データ一覧のCSVファイル（追加課題用）
* srcフォルダ  
    * com.rhizome.example.access.BaseAccess.java  
     ファイルアクセスのクラスに継承するベースクラス  
    * com.rhizome.example.data.BaseData.java  
     ファイルから取得したデータの格納用クラスに継承するベースクラス  
    * com.rhizome.example.data.EmployeeData.java  
     EmployeeData.csvから取得した従業員データを格納するためのクラス  
**【以下のクラスが修正対象】**  
    * com.rhizome.example.access.EmployeeAccess.java  
     従業員データの検索・登録・更新・削除を行うクラス
    * com.rhizome.example.main.Main.java  
     システムのメイン処理を書くクラス
* 実行例
    * エクスプローラ上で「このファイルを実行してください.bat」ファイルを実行してください  
    
### **納品物**

  作成したプログラム

### **進め方**

1. 各種説明をじっくり読んで把握しましょう
   把握できなければ質問してください。  
2. プロジェクトにどのファイルがあるかをすべて確認してください  
3. 確認できたら、1段階目から順に進めてください  
   問題内容を見て、何をしたいのか最初に把握するようにしてください  
   そして、「作成フローとポイント」と「実行例」を見て、  
   どう作るのかを考えてから作成に入りましょう。
4. 配布物に書いてある、修正対象のクラスを修正、もしくは新規クラスを追加して作成してください  

### **ゴール**

この問題を解き終わったら、ファイルを使った社員のCRUDシステムが完成します。  
問題を通して、以下のことができるようになることがゴールです。  
すべて身につけられた方は素晴らしいです。  
もちろんすべては難しくても、いくつかは達成できるように取り組みましょう。  

 * 実践的なプログラムにおけるオブジェクト指向の３大機能の目的・メリット・使用方法を理解する  
    * 継承（抽象クラスを継承し、抽象メソッドをオーバーライドしてクラス作成）  
    * 多態性（データクラスを親クラスの型で扱うことで汎用化）  
    * カプセル化（社員データクラスのprivateフィールド操作や、ファイルアクセス親クラスのprotectedメソッド利用）  
 * 例外処理の使用方法、止まらないシステムの作り方を理解する
 * コレクション(ArrayList)の使用方法を理解する
 * 既存のメソッドを利用する意識を付ける（汎用化・冗長性の排除）
 * 調査（検索）力をつける / 調査する癖をつける
 * ピンポイントで質問できるようになる

---------------------------------------
<br>

## **問題**


#### 1段階目（メインメニュー作成）
メインメニューを表示し、0を入力したら終了、0以外を入力したらエラー表示し、再入力させる。  
1段階目では1～4を入力しても未実装のためエラー表示とする。  

**＜作成フローとポイント＞**  
 1. Mainクラスのmain()メソッドを作成しましょう
    * 長くなる場合はメソッドに切り分けても問題ありません
    * ループ処理を書きましょう
    * 分岐処理を書きましょう

**＜実行例＞**

	システムを開始します
	
	1:検索 2:登録 3:更新 4:削除 0:終了
	1　　　　　　　　　　　　　　　　　　　　　　　←1を入力
	指定の番号を入力してください
	
	1:検索 2:登録 3:更新 4:削除 0:終了
	0　　　　　　　　　　　　　　　　　　　　　　　←0を入力
	システムを終了します

#### 2段階目（全検索作成）
メインメニューで1検索を選択すると検索メニューを表示する。  
検索メニューで1全検索を選択すると社員の一覧を表示し、メインメニューに戻る。  
検索メニューで1全検索以外を選択するとメインメニューに戻る。  

**＜処理説明＞**  
**EmployeeAccessクラス／従業員ファイル全件取得処理(selectAllメソッド)**  
 * 親クラス(BaseAccess)のファイル読み込みメソッド(readData)を呼び出し、従業員ファイル読み込み結果リストを取得する。  
 * 取得したリストの1件ごとに以下の処理を行う  
     * データ格納用クラス(EmployeeData)に値を格納する。  
     * データを格納したEmployeeDataインスタンスをArrayListに追加する。  
 * EmployeeDataインスタンスを格納したArrayListを戻り値として返却する。  

<br> 

**Mainクラス／全検索処理**  
 * メーンメニューで「1」(検索)選択時  
     * 検索メニューを表示する。   `1:全検索 2:条件検索 それ以外:戻る`  
     * 入力値を読み込む  
        * 入力値が「1」(全検索)の場合、  
            * EmployeeAccessクラスの従業員ファイル全件取得処理(selectAllメソッド)を呼び出し、取得結果リストを取得する。  
            * 取得結果件数分、データをタブ区切りで出力する。  
        * 入力値が「2」(条件検索)の場合  
          現段階では何もしない  
        * 入力値が上記以外の場合  
          何もしない  
    * メインメニューに戻る  

**＜作成フローとポイント＞**  
 1. EmployeeAccessクラスにBaseAccessクラスを継承しましょう
    * 継承時のコンストラクタと抽象メソッドの扱いに注意です
 2. EmployeeAccessクラスのselectAll()メソッドを作成していきましょう
    * CSVファイルからデータを取得するには、親クラスのreadDataメソッドを使用し、戻り値(`List<String>`型)を受け取りましょう  
    * 取得したListの1行ごとに1つのEmployeeDataインスタンスにデータを格納します  
        * 1行1行新しいインスタンスを作成して値を設定します  
        * 取得した1行のデータはCSVファイルの1行と同じ内容です  
         (例)"10000,山田龍也,ヤマダタツヤ,yamada@hoge.jp,aaa,10"  
        * インスタンスの各フィールドにデータを格納するために、1行の文字列を「,」区切りで分割しましょう（検索しましょう)  
        * EmployeeDataクラスはカプセル化されたクラスなので、値設定時に注意しましょう  
    * データを格納したEmployeeDataインスタンスをリスト(ArrayList)に設定しましょう  
    * 戻り値は型指定に注意しましょう（メソッドの定義側は変えられません）
        * 戻り値の型は`List<BaseData>`ですが、作成したリストの型は`ArrayList<EmployeeData>`です。  
          しかし多態性の特性がここで生きてくるので、考えてみましょう。  
 3. Mainクラスで「1」(検索)→「1」(全検索)が入力された場合の処理を書きましょう  
    * データを取得するには、作成したselectAll()メソッドを使用しましょう
        * selectAll()メソッドはインスタンスメソッドです。  
    * 取得データを全件、タブ区切りで表示しましょう（表示形式は＜実行例＞参照）  
        * タブ区切りの表示にはEmployeeDataクラスでオーバーライドされているtoStringメソッドを利用すると便利です
 4. 例外はmain()メソッドまでスローし、main()メソッドでキャッチしましょう（以降も同様のため、記載省略）
    * 例外処理はprintStackTrace()メソッドを使用するだけでOKです（実際はもっと考える必要があります）
 
 ※main()メソッドの処理が作成できると、**デバッグ**を使用することが可能になります。  
 　バグが出た際や、思った通り動かない場合は**デバッグを活用しましょう。**

**＜実行例＞**

	システムを開始します
	
	1:検索 2:登録 3:更新 4:削除 0:終了
	1
	1:全検索 2:条件検索 それ以外:戻る
	2　　　　　　　　　　　　　　　　　　　　　　　←未実装の2を入力
	
	1:検索 2:登録 3:更新 4:削除 0:終了
	1
	1:全検索 2:条件検索 それ以外:戻る
	1　　　　　　　　　　　　　　　　　　　　　　　←1を入力
	10000   山田龍也        ヤマダタツヤ    yamada@hoge.jp  aaa     10
	10001   高橋準  タカハシジュン  jtaka@hoge.jp   bbb     10
	10002   麻枝史明        マエダフミアキ  fmak@hoge.jp    ccc     11
	10003   丸戸章介        マルトショウスケ        marusyo@hoge.jp ddd     12
	10004   三宅武  ミヤケタケシ    miya@hoge.jp    eee     13
	10005   丸井悠  マルイハルカ    haru@hoge.jp    fff     13
	10006   涼元香織        スズモトカオリ  suzumoto@hoge.jp        ggg     13
	10007   葉山稔  ハヤマミノル    mhayama@hoge.jp hhh     14
	10008   川上朱里        カワカミアカリ  kawakami@hoge.jp        iii     14
	10009   杉井肇  スギイハジメ    sugi@hoge.jp    jjj     15
	
	1:検索 2:登録 3:更新 4:削除 0:終了

#### 3段階目（条件検索作成）
検索メニューで2条件検索を選択するとIDを入力させ、エラー時は再入力させる。  
正しいID入力時はDAOを使用して検索結果を表示する。

**＜作成フローとポイント＞**  
 1. EmployeeAccessクラスでselectById()メソッドの処理を作成しましょう
    * 2段階目で作成した全検索処理を使用してもよいです
 2. Mainクラスで「1」(検索)→「2」(条件検索)と入力した時の処理を作成しましょう
    * selectById()メソッドを利用して検索結果を取得しましょう
    * 指定されたIDに一致するデータのみを画面に表示しましょう

**＜実行例＞**  

	システムを開始します
	
	1:検索 2:登録 3:更新 4:削除 0:終了
	1
	1:全検索 2:条件検索 それ以外:戻る
	2
	IDを入力してください
	 　　　　　　　　　　　　　　　　　　　　　　　←入力なしでEnter
	IDは入力必須です。
	IDを入力してください
	1000x　　　　　　　　　　　　　　　　　　　　　←数字以外を入力
	IDは数値入力です
	IDを入力してください
	10010　　　　　　　　　　　　　　　　　　　　　←存在しないIDを入力
	入力された値で情報がみつかりませんでした
	
	1:検索 2:登録 3:更新 4:削除 0:終了
	1
	1:全検索 2:条件検索 それ以外:戻る
	2
	IDを入力してください
	10001
	10001   高橋準  タカハシジュン  jtaka@hoge.jp   bbb     10
	
	1:検索 2:登録 3:更新 4:削除 0:終了

#### 4段階目（登録作成）
メインメニューで2登録を選択すると各項目を入力させ、エラー時は再入力させる。  
各項目必須チェックを行う。  
ID、部署IDは数値チェックも行う。  
入力が正しければ登録する  	

**＜作成フローとポイント＞**  
 1. EmployeeAccessクラスでinsert()メソッドの処理を作成しましょう  
    * ファイルへの挿入処理は、既存のメソッドを使用しましょう
    * insert()メソッドの引数は多態性を使っている点に注意しましょう
 2. Mainクラスでは「2」(登録)を入力した時の処理を作成しましょう
    * 社員ID、部署IDは数値のみ入力できるようにしましょう
    * 各項目は入力されているか確認しましょう
    * ファイルへのデータ追加はinsert()メソッドを利用しましょう

**＜実行例＞**  

	システムを開始します
	
	1:検索 2:登録 3:更新 4:削除 0:終了
	2
	社員IDを入力してください
	
	社員IDは入力必須です。
	社員IDを入力してください
	10010
	社員名を入力してください
	てすと
	フリガナを入力してください
	テスト
	メールアドレスを入力してください
	test@hoge.jp
	パスワードを入力してください
	xxx
	部署IDを入力してください
	a2
	部署IDは数値入力です
	部署IDを入力してください
	12
	登録が完了しました
	
	1:検索 2:登録 3:更新 4:削除 0:終了

#### 5段階目（削除作成）
メインメニューで4削除を選択するとIDを入力させ、エラー時は再入力させる。  
正しいID入力時は削除確認を行い、Yかyを選択したらDAOを使用して削除する  

**＜作成フローとポイント＞**  
 1. EmployeeAccessクラスでdelete()メソッドの処理を作成しましょう
    * 全件取得して、そのリストから指定されたIDを除外し、新たなリストを作成しましょう（変数は複数作れます）
    * ファイルを更新するには、既存のメソッドを利用しましょう
 2. Mainクラスでは「4」(削除)を入力した時の処理を作成しましょう
    * IDは数値のみ入力できるようにしましょう
    * IDでデータを取得するには、既存のメソッドを利用しましょう
    * データの削除はdelete()メソッドを利用してファイルを上書きしましょう

**＜実行例＞**  

	システムを開始します
	
	1:検索 2:登録 3:更新 4:削除 0:終了
	4
	IDを入力してください
	 　　　　　　　　　　　　　　　　　　　　　　　←入力なしでEnter
	IDは入力必須です。
	IDを入力してください
	1000x　　　　　　　　　　　　　　　　　　　　　←数字以外を入力
	IDは数値入力です
	IDを入力してください
	10010　　　　　　　　　　　　　　　　　　　　　←存在しないIDを入力
	入力された値で情報がみつかりませんでした
	
	1:検索 2:登録 3:更新 4:削除 0:終了
	4
	IDを入力してください
	10002　　　　　　　　　　　　　　　　　　　　　←存在するIDを入力
	指定されたIDの情報を削除します？ Y/y
	（Y/y以外の入力であればキャンセル）
	N　　　　　　　　　　　　　　　　　　　　　　　←キャンセルを選択
	削除をキャンセルしました
	
	1:検索 2:登録 3:更新 4:削除 0:終了
	4
	IDを入力してください
	10002
	指定されたIDの情報を削除します？ Y/y
	（Y/y以外の入力であればキャンセル）
	y　　　　　　　　　　　　　　　　　　　　　　　←削除を選択
	削除が完了しました
	
	1:検索 2:登録 3:更新 4:削除 0:終了

#### 6段階目（更新作成）
メインメニューで3更新を選択すると各項目を入力させ、エラー時は再入力させる。  
ID、部署IDは数値チェックも行う。  
入力が正しければ更新する  

**＜作成フローとポイント＞**  
 1. EmployeeAccessクラスのupdate()メソッドの処理を作成しましょう
    * 全件取得して、指定されたIDのデータを上書きしてリストのデータに上書きしましょう
    * ファイルを更新するには、既存のメソッドを利用しましょう
 2. Mainクラスでは「3」(更新)を入力した時の処理を作成しましょう
    * ID、部署IDは数値のみ入力できるようにしましょう
    * IDでデータを取得するには、既存のメソッドを利用しましょう
    * データの更新はupdate()メソッドを利用しましょう

**＜実行例＞**  

	システムを開始します
	
	1:検索 2:登録 3:更新 4:削除 0:終了
	3
	IDを入力してください
	10011
	入力された値で情報がみつかりませんでした
	
	1:検索 2:登録 3:更新 4:削除 0:終了
	3
	IDを入力してください
	10010
	社員名を入力してください
	試し
	フリガナを入力してください
	タメシ
	メールアドレスを入力してください
	tameshi@hoge.jp
	パスワードを入力してください
	yyy
	部署IDを入力してください
	1c
	部署IDは数値入力です
	部署IDを入力してください
	14
	更新が完了しました
	
	1:検索 2:登録 3:更新 4:削除 0:終了


### ＜以下、時間が余った人向け＞

#### 7段階目（実行例の仕様確認）
作成したシステムの総合テストを行いましょう。  
実行例通り動いているか確認してください。  
以下の点を調査しながら、自身で項目を考えてみましょう。
* 正常系・異常系
* ブラックボックス・ホワイトボックス
* 分岐網羅・命令網羅

#### 8段階目（部署マスター管理作成）
EmployeeAccess、EmployeeDataを参考にDepartmentAccess、DepartmentDataを作成し、  
部署で全検索、条件検索、削除、登録、変更を実装してください。  
また、「9:データ切り替え」切替を行うたびに社員と部署のデータを切り替えるようにしましょう。  
メニューが以下となります。  
1:検索 2:登録 3:更新 4:削除 9:データ切り替え 0:終了  

以上